{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#aindo-anonymize","title":"Aindo Anonymize","text":"<p>Welcome to the documentation of the Aindo Anonymize library.</p> <p>Aindo Anonymize is a lightweight Python library for anonymizing tabular data, offering a collection of techniques such as masking, mocking, perturbation, and more.</p>"},{"location":"#installation","title":"Installation","text":"<p>Aindo Anonymize can be installed via pip from PyPI.</p> <pre><code>pip install aindo-anonymize\n</code></pre> <p>It officially supports Python 3.10, 3.11 and 3.12.</p>"},{"location":"#quick-example","title":"Quick example","text":"<p>The library provides a modular approach to data anonymization, where each technique is represented by its own class. To anonymize your tabular data, first initialize the desired anonymization technique class, configure its options, and then apply it to your data:</p> <pre><code>import pandas as pd\nfrom aindo.anonymize.techniques import CharacterMasking\n\ncol = pd.Series([\"John\", \"Mark\", \"Lucy\", \"Alice\"])\nmasking = CharacterMasking(starting_direction=\"right\", mask_length=2)\n\nmasking.anonymize_column(col)\n# 0     Jo**\n# 1     Ma**\n# 2     Lu**\n# 3    Ali**\n# dtype: object\n</code></pre>"},{"location":"api_reference/config/","title":"Configuration","text":""},{"location":"api_reference/config/#aindo.anonymize.config.Config","title":"Config","text":"<p>Configuration for the high-level interface <code>aindo.anonymize.AnonymizationPipeline</code>.</p>"},{"location":"api_reference/config/#aindo.anonymize.config.Config.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(value: dict[str, Any]) -&gt; Config\n</code></pre> <p>Creates an instance of the class from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>dict[str, Any]</code> <p>A dictionary where keys represent the attributes of the class and values are their corresponding values.</p> required <p>Returns:</p> Type Description <code>Config</code> <p>An instance of the class populated with the data from the dictionary.</p>"},{"location":"api_reference/config/#configuration-schema","title":"Configuration Schema","text":"<p>The <code>Config.from_dict</code> method accepts a Python dictionary following the schema below.  </p> Key Type Description <code>steps</code> <code>list[dict]</code> A list of anonymization steps. <code>steps[i].method</code> <code>dict</code> Defines the anonymization technique and its parameters. <code>steps[i].method.type</code> <code>str</code> The name of the anonymization technique in snake_case. <code>steps[i].method.&lt;param&gt;</code> <code>dict</code> Additional key-value pairs for technique-specific parameters. See the list of anonymization techniques and their respective parameters. <code>steps[i].columns</code> <code>list[string] | None</code> The list of column names to which the anonymization method applies. <p>For a full configuration example, see the code below. Note that some parameters may be mutually exclusive and are therefore not included in this example. For a complete reference of technique-specific parameters, see the API reference - Techniques.</p> Full configuration example config.json<pre><code>{\n  \"steps\": [\n    {\n      \"method\": {\n        \"type\": \"binning\",\n        \"bins\": 10\n      },\n      \"columns\": [\"column_a\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"character_masking\",\n        \"mask_length\": 3,\n        \"symbol\": \"*\",\n        \"starting_direction\": \"left\"\n      },\n      \"columns\": [\"column_b\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"data_nulling\",\n        \"constant_value\": \"BLANK\"\n      },\n      \"columns\": [\"column_c\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"key_hashing\",\n        \"key\": \"my key\",\n        \"salt\": \"my salt\",\n        \"hash_name\": \"sha256\"\n      },\n      \"columns\": [\"column_d\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"mocking\",\n        \"data_generator\": \"name\"\n      },\n      \"columns\": [\"column_e\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"perturbation_categorical\",\n        \"alpha\": 0.8,\n        \"sampling_mode\": \"uniform\",\n        \"frequencies\": [\n          {\"A\": 0.5},\n          {\"B\": 0.5}\n        ],\n        \"seed\": 42\n      },\n      \"columns\": [\"column_f\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"perturbation_numerical\",\n        \"alpha\": 0.8,\n        \"sampling_mode\": \"weighted\",\n        \"perturbation_range\": [1, 10],\n        \"seed\": 42\n      },\n      \"columns\": [\"column_g\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"swapping\",\n        \"alpha\": 0.8,\n        \"seed\": 42\n      },\n      \"columns\": [\"column_h\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"top_bottom_coding_categorical\",\n        \"q\": 0.8,\n        \"other_label\": \"OTHER\"\n      },\n      \"columns\": [\"column_i\"]\n    },\n    {\n      \"method\": {\n        \"type\": \"top_bottom_coding_numerical\",\n        \"q\": 0.3\n      },\n      \"columns\": [\"column_l\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"api_reference/pipeline/","title":"Pipeline","text":""},{"location":"api_reference/pipeline/#aindo.anonymize.pipeline.AnonymizationPipeline","title":"AnonymizationPipeline","text":"<pre><code>AnonymizationPipeline(config: Config)\n</code></pre> <p>A high-level interface for orchestrating the anonymization process.</p> <p>This class provides a quick way to apply anonymization techniques to a dataset, allowing users to run anonymization pipelines with minimal setup.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>Config</code> <p>Configuration that specifies the anonymization steps to execute.</p>"},{"location":"api_reference/pipeline/#aindo.anonymize.pipeline.AnonymizationPipeline.run","title":"run","text":"<pre><code>run(dataframe: DataFrame) -&gt; DataFrame\n</code></pre> <p>Runs the anonymization steps defined in the configuration against the input data.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The input data to be anonymized.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The anonymized version of the input data.</p>"},{"location":"api_reference/techniques/","title":"Techniques","text":"<p><code>aindo-anonymize</code> techniques are classes that derive from <code>BaseTechnique</code> and define specific parameters and logic for anonymization.</p> <p>Single-column techniques are anonymization methods designed to operate on individual data columns. These techniques are implemented as classes that derive from <code>BaseSingleColumnTechnique</code>.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.base.BaseTechnique","title":"BaseTechnique","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for all anonymization techniques.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.base.BaseTechnique.anonymize","title":"anonymize  <code>abstractmethod</code>","text":"<pre><code>anonymize(dataframe: DataFrame) -&gt; DataFrame\n</code></pre> <p>Applies the anonymization technique to the given data.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The input data to be anonymized.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The anonymized version of the input data.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.base.BaseSingleColumnTechnique","title":"BaseSingleColumnTechnique","text":"<p>               Bases: <code>BaseTechnique</code>, <code>ABC</code></p> <p>Abstract base class for anonymization techniques applied to a single column.</p> <p>Subclasses should implement the <code>anonymize_column</code> method, which defines the logic for anonymizing a single column.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.base.BaseSingleColumnTechnique.anonymize_column","title":"anonymize_column","text":"<pre><code>anonymize_column(col: Series) -&gt; Series\n</code></pre> <p>Applies the anonymization technique to a single column.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>Series</code> <p>The input data to be anonymized.</p> required <p>Returns:</p> Type Description <code>Series</code> <p>The anonymized version of the input data.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.base.BaseSingleColumnTechnique.anonymize","title":"anonymize","text":"<pre><code>anonymize(dataframe: DataFrame) -&gt; DataFrame\n</code></pre> <p>Applies the anonymization technique to a single-column dataframe.</p> <p>This is analogous to calling <code>anonymize_column()</code> on a single Pandas Series. It is a convenience method shared across all types of anonymizers.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The input data. Must have exactly one column.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The anonymized version of the input data.</p>"},{"location":"api_reference/techniques/#techniques","title":"Techniques","text":""},{"location":"api_reference/techniques/#aindo.anonymize.techniques.data_nulling.DataNulling","title":"DataNulling","text":"<pre><code>DataNulling(constant_value: Any = None)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements data nulling.</p> <p>Data nulling replaces the original data with a <code>None</code> value (or a custom constant value).</p> <p>Attributes:</p> Name Type Description <code>constant_value</code> <code>Any</code> <p>The value that will replace the original data. Default to None.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.char_masking.CharacterMasking","title":"CharacterMasking","text":"<pre><code>CharacterMasking(\n    mask_length: int = 1,\n    symbol: AnyStr = \"*\",\n    starting_direction: StartingDirection = \"left\",\n)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code>, <code>Generic[AnyStr]</code></p> <p>Implements character masking.</p> <p>Character masking involves replacing, usually partially, the characters of a data value with a constant symbol. Full masking is achieved by setting <code>mask_length=-1</code>.</p> <p>Attributes:</p> Name Type Description <code>starting_direction</code> <code>StartingDirection</code> <p>The direction in which masking starts. Default is \"left\".</p> <code>mask_length</code> <code>int</code> <p>The number of characters to mask. Set to -1 to mask the entire value. Defaults to 1.</p> <code>symbol</code> <code>AnyStr</code> <p>The symbol used for masking. Defaults to \"*\".</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.mocking.Mocking","title":"Mocking","text":"<pre><code>Mocking(\n    data_generator: MockingGeneratorMethods,\n    seed: SeedType = None,\n    faker_kwargs: dict[str, Any] | None = None,\n    faker_generator_kwargs: dict[str, Any] | None = None,\n)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements mocking.</p> <p>Mocking generates realistic mock data for various fields such as names, addresses, emails, and more. It leverages the <code>faker</code> library to produce customizable, locale-aware fake data.</p> <p>Attributes:</p> Name Type Description <code>data_generator</code> <code>MockingGeneratorMethods</code> <p>Faker's generator method (\"fake\") used to generate data (e.g., name, email).</p> <code>seed</code> <code>SeedType</code> <p>A seed to initialize numpy <code>Generator</code>.</p> <p>Parameters:</p> Name Type Description Default <code>data_generator</code> <code>MockingGeneratorMethods</code> <p>Faker's generator method (\"fake\") used to generate data (e.g., name, email).</p> required <code>faker_kwargs</code> <code>dict[str, Any] | None</code> <p>Additional arguments passed to the main Faker object (proxy class).</p> <code>None</code> <code>faker_generator_kwargs</code> <code>dict[str, Any] | None</code> <p>Additional arguments passed to the Faker's generator method.</p> <code>None</code>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.hashing.KeyHashing","title":"KeyHashing","text":"<pre><code>KeyHashing(\n    key: str,\n    salt: str | None = None,\n    hash_name: str = \"sha256\",\n)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements key-based hashing.</p> <p>Data values are hashed using HMAC with a cryptographic key and the chosen hashing algorithm (defaults to SHA-256). The resulting hash is then encoded using Base64. The de-identified values have always a uniform length.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>The cryptographic key used for hashing.</p> <code>salt</code> <code>str | None</code> <p>An optional salt that can be added to the value before hashing. Defaults to None.</p> <code>hash_name</code> <code>str</code> <p>The hashing algorithm to use, compatible with <code>hashlib.new()</code>. Defaults to \"sha256\".</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.swapping.Swapping","title":"Swapping","text":"<pre><code>Swapping(alpha: float, **kwargs: SeedT)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code>, <code>Seeder</code>, <code>AlphaProbability</code></p> <p>Implements swapping.</p> <p>Swapping rearranges data by shuffling values, ensuring that individual values remain present but are generally not in their original position. The process is controlled by the <code>alpha</code> parameter, representing the probability of a row being swapped with another.</p> <p>Attributes:</p> Name Type Description <code>alpha</code> <code>float</code> <p>The perturbation intensity, a value in the range [0, 1].</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.binning.Binning","title":"Binning","text":"<pre><code>Binning(bins: int | Sequence[int] | Sequence[float])\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements binning for numerical columns.</p> <p>Binning works by grouping numerical values into discrete bins, allowing for data generalization by replacing individual values with their corresponding bin ranges.</p> <p>Attributes:</p> Name Type Description <code>bins</code> <code>int | Sequence[int] | Sequence[float]</code> <p>The bin edges or number of bins to use.</p> <p>Examples:</p> <p>An integer bins will form equal-width bins.</p> <pre><code>&gt;&gt;&gt; ages = pd.Series([10, 15, 13, 12, 23, 25, 28, 59, 60])\n&gt;&gt;&gt; Binning(bins=3).anonymize_column(ages)\n[(9.95, 26.667], (9.95, 26.667], (9.95, 26.667], ...\nCategories (3, interval[float64, right]): [(9.95, 26.667] &lt; (26.667, 43.333] &lt; (43.333, 60.0]]\n</code></pre> <p>A list of ordered bin edges will assign an interval for each variable.</p> <pre><code>&gt;&gt;&gt; ages = pd.Series([10, 15, 13, 12, 23, 25, 28, 59, 60])\n&gt;&gt;&gt; Binning(bins=[0, 18, 35, 70]).anonymize_column(ages)\n[(0, 18], (0, 18], (0, 18], (0, 18], (18, 35], ...\nCategories (3, interval[int64, right]): [(0, 18] &lt; (18, 35] &lt; (35, 70]]\n</code></pre>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.perturbation.PerturbationNumerical","title":"PerturbationNumerical","text":"<pre><code>PerturbationNumerical(\n    alpha: float,\n    sampling_mode: SamplingMode = \"uniform\",\n    perturbation_range: tuple[NumericsT, NumericsT]\n    | None = None,\n    **kwargs: SeedT,\n)\n</code></pre> <p>               Bases: <code>BasePerturbation</code>, <code>Generic[NumericsT]</code></p> <p>Implements perturbation for numerical columns.</p> <p>Perturbation consists of modify each value based on the specified perturbation intensity (alpha) and replacement strategy. It supports two modes of replacement: uniform sampling and distribution-preserving sampling.</p> <p>Attributes:</p> Name Type Description <code>alpha</code> <code>float</code> <p>The perturbation intensity, a value in the range [0, 1]. - <code>alpha=0</code>: No perturbation; values remain unchanged. - <code>alpha=1</code>: Maximum perturbation; values are fully replaced according to the specified sampling mode.</p> <code>sampling_mode</code> <code>SamplingMode</code> <p>The strategy used to sample replacement values: - <code>uniform</code>: Values are perturbed with random values uniformly sampled from the range [min, max]. - <code>weighted</code>: Values are perturbed in a way to keep the original distribution.</p> <code>perturbation_range</code> <code>tuple[NumericsT, NumericsT] | None</code> <p>A tuple[min, max] within which random values are sampled. If not set, the range is automatically computed as the minimum and maximum of the input data.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.perturbation.PerturbationCategorical","title":"PerturbationCategorical","text":"<pre><code>PerturbationCategorical(\n    alpha: float,\n    sampling_mode: SamplingMode = \"uniform\",\n    frequencies: dict[str, float] | None = None,\n    **kwargs: SeedT,\n)\n</code></pre> <p>               Bases: <code>BasePerturbation</code></p> <p>Implements perturbation for categorical columns.</p> <p>Perturbation consists of replacing values with randomized alternatives based on the specified sampling mode and perturbation intensity (alpha). It supports two modes of replacement: uniform sampling and distribution-preserving sampling.</p> <p>Attributes:</p> Name Type Description <code>alpha</code> <code>float</code> <p>The perturbation intensity, a value in the range [0, 1]. - <code>alpha=0</code>: No perturbation; values remain unchanged. - <code>alpha=1</code>: Maximum perturbation; values are fully replaced according to the specified sampling mode.</p> <code>sampling_mode</code> <code>SamplingMode</code> <p>The strategy used to sample replacement values: - <code>uniform</code>: Replaces values with others chosen uniformly at random. - <code>weighted</code>: Replaces values based on their original distribution.</p> <code>frequencies</code> <code>dict[str, float] | None</code> <p>Optional mapping of unique values to their relative frequencies, used for weighted sampling mode. Automatically computed if not provided.</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.top_bottom_coding.TopBottomCodingNumerical","title":"TopBottomCodingNumerical","text":"<pre><code>TopBottomCodingNumerical(\n    q: float | None = None,\n    lower_value: float | None = None,\n    upper_value: float | None = None,\n)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements top/bottom coding for numerical columns.</p> <p>This technique caps values above the <code>(1 - q/2)</code> quantile (top coding) and raises values below the <code>(q/2)</code> quantile (bottom coding). The threshold parameter <code>q</code> specifies the total proportion of extreme values to code (e.g., <code>q=0.1</code> applies top/bottom coding to 5% each).</p> <p>Either the threshold <code>q</code> or both quantile values (<code>lower_value</code> and <code>upper_value</code>) must be provided, but not both. If <code>lower_value</code> and <code>upper_value</code> are used, they must be specified together.</p> <p>Attributes:</p> Name Type Description <code>q</code> <code>float | None</code> <p>Proportion controlling the extent of top/bottom coding, between 0 and 1.</p> <code>lower_value</code> <code>float | None</code> <p>Input data quantile value at q/2.</p> <code>upper_value</code> <code>float | None</code> <p>Input data quantile value at (1- q/2).</p>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.top_bottom_coding.TopBottomCodingCategorical","title":"TopBottomCodingCategorical","text":"<pre><code>TopBottomCodingCategorical(\n    q: float | None = None,\n    other_label: Any = \"OTHER\",\n    rare_categories: list[Any] | None = None,\n)\n</code></pre> <p>               Bases: <code>BaseSingleColumnTechnique</code></p> <p>Implements top/bottom coding for categorical columns.</p> <p>Categories representing less or equal than <code>q</code> of the total data are replaced with the <code>other_label</code> (e.g.: q=0.01 represents the 1%).</p> <p>Attributes:</p> Name Type Description <code>q</code> <code>float | None</code> <p>A proportion controlling the extent of top/bottom coding, between 0 and 1.</p> <code>other_label</code> <code>Any</code> <p>The new category to replace rare categories with. Default is \"OTHER\".</p> <code>rare_categories</code> <code>list[Any] | None</code> <p>A list of rare categories to be replaced. This can be used instead of the <code>q</code> parameter to explicitly specify which categories should be replaced with <code>other_label</code>.</p>"},{"location":"api_reference/techniques/#types","title":"Types","text":""},{"location":"api_reference/techniques/#aindo.anonymize.techniques.char_masking.StartingDirection","title":"StartingDirection  <code>module-attribute</code>","text":"<pre><code>StartingDirection = Literal['left', 'right']\n</code></pre>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.common.SeedT","title":"SeedT  <code>module-attribute</code>","text":"<pre><code>SeedT = int | Generator | None\n</code></pre>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.perturbation.SamplingMode","title":"SamplingMode  <code>module-attribute</code>","text":"<pre><code>SamplingMode = Literal['uniform', 'weighted']\n</code></pre>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.perturbation.NumericsT","title":"NumericsT  <code>module-attribute</code>","text":"<pre><code>NumericsT = TypeVar('NumericsT', int, float)\n</code></pre>"},{"location":"api_reference/techniques/#aindo.anonymize.techniques.mocking.MockingGeneratorMethods","title":"MockingGeneratorMethods  <code>module-attribute</code>","text":"<pre><code>MockingGeneratorMethods = Literal[\n    \"aba\",\n    \"address\",\n    \"administrative_unit\",\n    \"am_pm\",\n    \"android_platform_token\",\n    \"ascii_company_email\",\n    \"ascii_email\",\n    \"ascii_free_email\",\n    \"ascii_safe_email\",\n    \"bank_country\",\n    \"bban\",\n    \"binary\",\n    \"boolean\",\n    \"bothify\",\n    \"bs\",\n    \"building_number\",\n    \"catch_phrase\",\n    \"century\",\n    \"chrome\",\n    \"city\",\n    \"city_prefix\",\n    \"city_suffix\",\n    \"color\",\n    \"color_name\",\n    \"company\",\n    \"company_email\",\n    \"company_suffix\",\n    \"coordinate\",\n    \"country\",\n    \"country_calling_code\",\n    \"country_code\",\n    \"credit_card_expire\",\n    \"credit_card_full\",\n    \"credit_card_number\",\n    \"credit_card_provider\",\n    \"credit_card_security_code\",\n    \"cryptocurrency\",\n    \"cryptocurrency_code\",\n    \"cryptocurrency_name\",\n    \"csv\",\n    \"currency\",\n    \"currency_code\",\n    \"currency_name\",\n    \"currency_symbol\",\n    \"current_country\",\n    \"current_country_code\",\n    \"date\",\n    \"date_between\",\n    \"date_between_dates\",\n    \"date_object\",\n    \"date_of_birth\",\n    \"date_this_century\",\n    \"date_this_decade\",\n    \"date_this_month\",\n    \"date_this_year\",\n    \"date_time\",\n    \"date_time_ad\",\n    \"date_time_between\",\n    \"date_time_between_dates\",\n    \"date_time_this_century\",\n    \"date_time_this_decade\",\n    \"date_time_this_month\",\n    \"date_time_this_year\",\n    \"day_of_month\",\n    \"day_of_week\",\n    \"dga\",\n    \"domain_name\",\n    \"domain_word\",\n    \"dsv\",\n    \"ean\",\n    \"ean13\",\n    \"ean8\",\n    \"ein\",\n    \"email\",\n    \"emoji\",\n    \"enum\",\n    \"file_extension\",\n    \"file_name\",\n    \"file_path\",\n    \"firefox\",\n    \"first_name\",\n    \"first_name_female\",\n    \"first_name_male\",\n    \"first_name_nonbinary\",\n    \"fixed_width\",\n    \"free_email\",\n    \"free_email_domain\",\n    \"future_date\",\n    \"future_datetime\",\n    \"hex_color\",\n    \"hexify\",\n    \"hostname\",\n    \"http_method\",\n    \"iana_id\",\n    \"iban\",\n    \"image\",\n    \"image_url\",\n    \"internet_explorer\",\n    \"invalid_ssn\",\n    \"ios_platform_token\",\n    \"ipv4\",\n    \"ipv4_network_class\",\n    \"ipv4_private\",\n    \"ipv4_public\",\n    \"ipv6\",\n    \"isbn10\",\n    \"isbn13\",\n    \"iso8601\",\n    \"itin\",\n    \"job\",\n    \"json\",\n    \"json_bytes\",\n    \"language_code\",\n    \"language_name\",\n    \"last_name\",\n    \"last_name_female\",\n    \"last_name_male\",\n    \"last_name_nonbinary\",\n    \"latitude\",\n    \"latlng\",\n    \"lexify\",\n    \"license_plate\",\n    \"linux_platform_token\",\n    \"linux_processor\",\n    \"local_latlng\",\n    \"locale\",\n    \"localized_ean\",\n    \"localized_ean13\",\n    \"localized_ean8\",\n    \"location_on_land\",\n    \"longitude\",\n    \"mac_address\",\n    \"mac_platform_token\",\n    \"mac_processor\",\n    \"md5\",\n    \"military_apo\",\n    \"military_dpo\",\n    \"military_ship\",\n    \"military_state\",\n    \"mime_type\",\n    \"month\",\n    \"month_name\",\n    \"msisdn\",\n    \"name\",\n    \"name_female\",\n    \"name_male\",\n    \"name_nonbinary\",\n    \"nic_handle\",\n    \"nic_handles\",\n    \"null_boolean\",\n    \"numerify\",\n    \"opera\",\n    \"paragraph\",\n    \"paragraphs\",\n    \"password\",\n    \"past_date\",\n    \"past_datetime\",\n    \"phone_number\",\n    \"port_number\",\n    \"postalcode\",\n    \"postalcode_in_state\",\n    \"postalcode_plus4\",\n    \"postcode\",\n    \"postcode_in_state\",\n    \"prefix\",\n    \"prefix_female\",\n    \"prefix_male\",\n    \"prefix_nonbinary\",\n    \"pricetag\",\n    \"profile\",\n    \"providers\",\n    \"psv\",\n    \"pybool\",\n    \"pydecimal\",\n    \"pydict\",\n    \"pyfloat\",\n    \"pyint\",\n    \"pyiterable\",\n    \"pylist\",\n    \"pyset\",\n    \"pystr\",\n    \"pystr_format\",\n    \"pystruct\",\n    \"pytimezone\",\n    \"pytuple\",\n    \"random_choices\",\n    \"random_digit\",\n    \"random_digit_not_null\",\n    \"random_digit_not_null_or_empty\",\n    \"random_digit_or_empty\",\n    \"random_element\",\n    \"random_elements\",\n    \"random_int\",\n    \"random_letter\",\n    \"random_letters\",\n    \"random_lowercase_letter\",\n    \"random_number\",\n    \"random_sample\",\n    \"random_uppercase_letter\",\n    \"randomize_nb_elements\",\n    \"rgb_color\",\n    \"rgb_css_color\",\n    \"ripe_id\",\n    \"safari\",\n    \"safe_color_name\",\n    \"safe_domain_name\",\n    \"safe_email\",\n    \"safe_hex_color\",\n    \"secondary_address\",\n    \"sentence\",\n    \"sentences\",\n    \"sha1\",\n    \"sha256\",\n    \"simple_profile\",\n    \"slug\",\n    \"ssn\",\n    \"state\",\n    \"state_abbr\",\n    \"street_address\",\n    \"street_name\",\n    \"street_suffix\",\n    \"suffix\",\n    \"suffix_female\",\n    \"suffix_male\",\n    \"suffix_nonbinary\",\n    \"swift\",\n    \"swift11\",\n    \"swift8\",\n    \"tar\",\n    \"text\",\n    \"texts\",\n    \"time\",\n    \"time_delta\",\n    \"time_object\",\n    \"time_series\",\n    \"timezone\",\n    \"tld\",\n    \"tsv\",\n    \"unix_device\",\n    \"unix_partition\",\n    \"unix_time\",\n    \"upc_a\",\n    \"upc_e\",\n    \"uri\",\n    \"uri_extension\",\n    \"uri_page\",\n    \"uri_path\",\n    \"url\",\n    \"user_agent\",\n    \"user_name\",\n    \"uuid4\",\n    \"windows_platform_token\",\n    \"word\",\n    \"words\",\n    \"year\",\n    \"zip\",\n    \"zipcode\",\n    \"zipcode_in_state\",\n    \"zipcode_plus4\",\n]\n</code></pre>"},{"location":"developers/changelog/","title":"Changelog","text":""},{"location":"developers/changelog/#changelog","title":"Changelog","text":""},{"location":"developers/changelog/#101-2025-03-07","title":"1.0.1 (2025-03-07)","text":""},{"location":"developers/changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>add missing parentheses in <code>Config.__repr__</code> (ef36d25)</li> <li>invalid Config input with empty steps (80e8856)</li> </ul>"},{"location":"developers/changelog/#documentation","title":"Documentation","text":"<ul> <li>fix license badge (459041c)</li> <li>ignore some files from site build (e7c6164)</li> </ul>"},{"location":"developers/changelog/#100-2025-03-07","title":"1.0.0 (2025-03-07)","text":"<p>First release \ud83c\udf89</p>"},{"location":"developers/contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! </p>"},{"location":"developers/contributing/#git-workflow","title":"Git workflow","text":"<p>The standard process to contribute to this project follows these steps:</p> <ol> <li>Fork the repository on GitHub and clone your fork locally.     <pre><code># Clone your fork and cd into the repo directory\ngit clone git@github.com:&lt;your username&gt;/aindo-anonymize.git\ncd aindo-anonymize\n</code></pre></li> <li> <p>Check out a new branch and make your changes.     <pre><code># Checkout a new branch and make your changes\ngit checkout -b my-new-feature-branch\n# Make your changes...\n</code></pre></p> </li> <li> <p>Commit your changes with a clear message following the Conventional Commit standard, then push your changes.</p> </li> <li> <p>Open a Pull Request (PR) on GitHub, describing your changes. Provide as much information as possible, including a description of your changes and links to any relevant issues.</p> </li> </ol> <p>Unless your change is trivial (e.g., a typo), please open an issue to discuss the proposed change before submitting a pull request.</p>"},{"location":"developers/contributing/#development-setup","title":"Development setup","text":"<p>Fortunately, Aindo Anonymize has minimal dependencies and doesn't require access to external resources, so setting up and running the tests should be straightforward.</p> <p>Before getting started, you'll need the following prerequisites:</p> <ul> <li>git</li> <li>any Python version between 3.10 and 3.12</li> <li>ideally, though not required, a virtual environment tool (<code>venv</code>, <code>uv</code>, etc.) should be used.</li> </ul> <p>Tip</p> <p>tl;dr: use <code>pre-commit</code> to fix formatting, <code>pyright</code> for type checking, <code>pytest</code> to run tests and <code>mkdocs build</code> to build the docs.</p>"},{"location":"developers/contributing/#installation-and-setup","title":"Installation and setup","text":"<p>Install <code>aindo-anonymize</code> with dependencies, including those for testing, development, and documentation.</p> <pre><code>pip install -e \".[dev,test]\"\npip install -r docs/requirements.txt\n</code></pre>"},{"location":"developers/contributing/#run-tests","title":"Run tests","text":"<p>Before submitting changes, make sure all tests pass and check test coverage:</p> <pre><code>coverage run -m pytest\ncoverage report\n</code></pre>"},{"location":"developers/contributing/#linting-and-type-checking","title":"Linting and type checking","text":"<p>Run the linter locally to make sure everything is working as expected.</p> <pre><code>ruff check --fix\nruff format\n</code></pre> <p>To ensure type correctness, run Pyright with <code>pyright</code>.</p> <p>Info</p> <p>Lint checks are automatically performed before each commit using pre-commit hooks.</p>"},{"location":"developers/contributing/#build-documentation","title":"Build documentation","text":"<p>After making any updates to the documentation, such as changes to function signatures, class definitions, or docstrings that will appear in the API docs, be sure to check that the build goes through successfully.</p> <pre><code># Build documentation\nmkdocs build\n</code></pre> <p>You can also use <code>mkdocs serve</code> to serve the documentation at <code>localhost:8000</code>.</p>"},{"location":"developers/contributing/#documentation-style","title":"Documentation style","text":"<p>Documentation is written in Markdown and built using Material for MkDocs. API documentation is build from docstrings using mkdocstrings.</p> <p>Documentation should be clear, approachable, and easy to understand, balancing brevity with completeness to ensure all essential information is included.</p>"},{"location":"developers/contributing/#code-documentation","title":"Code documentation","text":"<p>Ensure that all code is well-documented using properly formatted docstrings. The following elements should include documentation:</p> <ul> <li>Class definitions</li> <li>Function definitions</li> <li>Module-level variables</li> </ul> <p>Aindo Anonymize follows Google-style docstrings (see Example Google Style Python Docstrings for further examples). Class attributes and function arguments should be documented in the format <code>name: description.</code>, as types are inferred from the signature. </p>"},{"location":"get_started/overview/","title":"Overview","text":"<p>The <code>aindo.anonymize</code> library supports <code>pandas.DataFrame</code> and <code>pandas.Series</code> data structures for both inputs and outputs, depending on the method used (see the <code>anonymize</code> and <code>anonymize_column</code> methods). This means that the data must be loaded as <code>pandas.DataFrame</code> or <code>pandas.Series</code> before being processed. The anonymization techniques will then return the anonymized data in the same format \u2014 either <code>pandas.DataFrame</code> or <code>pandas.Series</code> \u2014 based on the method used.</p> <p>It currently implements the following anonymization techniques:</p> <ul> <li> <p>Data nulling: Replaces the original data with <code>None</code> or a custom constant value.</p> </li> <li> <p>Character masking: Replaces some or all characters with a constant symbol.</p> </li> <li> <p>Mocking: Generates realistic mock data for various fields, such as names, emails, and more.</p> </li> <li> <p>KeyHashing: Data values are hashed using a cryptographic key and then encoded using Base64.</p> </li> <li> <p>Swapping: Rearranges data by swapping values.</p> </li> <li> <p>Binning: Groups numerical values into discrete ranges (bins), replacing each value with the corresponding range.</p> </li> <li> <p>Top/Bottom coding: Replaces values above or below certain thresholds with a capped value.</p> </li> <li> <p>Perturbation: Slightly modifies the values according to the specified perturbation intensity and replacement strategy.</p> </li> </ul> <p>The library provides two usage approaches, supporting different use cases and development preferences:</p> <ul> <li> <p>Explicit approach: this method involves directly instantiating anonymization techniques using the library's Python classes (e.g., <code>Binning</code> for data binning). It is particularly effective for scenarios where: (1) a limited number of techniques need to be applied, (2) the anonymization methods are predefined and can be hardcoded, and (3) development environment features, such as code completion and type checking, are leveraged to enhance productivity and maintainability. See a simple example here.</p> </li> <li> <p>Declarative approach: this approach allows users to define multiple anonymization techniques within a single configuration, which is then executed sequentially on the input data. The configuration can be instantiated from a Python dictionary using the <code>Config.from_dict</code> method and can be read from files in YAML, TOML or JSON formats. This method is particularly advantageous when the anonymization workflow is dynamic and requires flexibility. See a simple example here.</p> </li> </ul>"},{"location":"get_started/quickstart/","title":"Quick start","text":""},{"location":"get_started/quickstart/#quick-start","title":"Quick start","text":"<p>In the following examples, we will demonstrate how to anonymize specific columns of the UCI Adult dataset using the Explicit and the Declarative approaches.</p> <p>The first step is to load the CSV file into a <code>pandas.DataFrame</code>: Load UCI Adult dataset<pre><code>import pandas as pd\n\ndtypes = {\n    \"age\": \"int\",\n    \"workclass\": \"category\",\n    \"fnlwgt\": \"int\",\n    \"education\": \"category\",\n    \"education-num\": \"category\",\n    \"marital-status\": \"category\",\n    \"occupation\": \"category\",\n    \"relationship\": \"category\",\n    \"race\": \"category\",\n    \"sex\": \"category\",\n    \"capital-gain\": \"int\",\n    \"capital-loss\": \"int\",\n    \"hours-per-week\": \"int\",\n    \"native-country\": \"category\",\n    \"y\": \"category\",\n}\ndf = pd.read_csv(\"adult.data\", names=list(dtypes.keys()), dtype=dtypes)\n</code></pre></p>"},{"location":"get_started/quickstart/#explicit-approach","title":"Explicit approach","text":"<p>In the explicit the user directly instantiates techniques and apply them to specific columns.  <pre><code>from aindo.anonymize.techniques import Binning, TopBottomCodingCategorical # (1)!\n\n# Replace education categories representing less or equal than 1%\n# of values with \"OTHER\"\nanonymizer = TopBottomCodingCategorical(q=0.01, other_label=\"OTHER\") # (2)!\nprint(anonymizer.anonymize_column(df.education)) # (3)!\n\n# Group age values into discrete bins and replace each age\n# with its corresponding bin range\nanonymizer = Binning(bins=[17, 20, 30, 50, 70, 90])\nprint(anonymizer.anonymize_column(df.age))\n</code></pre></p> <ol> <li>All anonymization techniques are imported from <code>aindo.anonymize.techniques</code>.</li> <li>Create an instance of the Top-Bottom Coding technique for categorical data.</li> <li><code>anonymizer.anonymize_column()</code> applies the anonymization technique to a single column (provided as a Pandas <code>Series</code>) and always returns a copy.</li> </ol> <p>For a complete list of available techniques and their parameters, please refer to API reference - Techniques.</p>"},{"location":"get_started/quickstart/#declarative-approach","title":"Declarative approach","text":"<p>In the declarative approach a yaml configuration file needs to be created first, listing all the operations that need  to be performed in the desired order, defining a pipeline of operations. config.yml<pre><code># aindo-anonymize table anonymization configuration\nsteps:\n  - method:\n      type: top_bottom_coding_categorical # specifies the technique to be configured\n      q: 0.01 # specific parameter for the Top-Bottom Coding technique\n    columns: [education] # list of column names to which the technique will be applied\n  - method:\n      type: binning\n      bins: [17, 20, 30, 50, 70, 90]\n    columns: [age]\n</code></pre></p> <p>Then, the defined configuration file can be loaded as pipeline and the pipeline executed. <pre><code>import yaml\nfrom aindo.anonymize import AnonymizationPipeline, Config\n\nconfig = Config.from_dict(yaml.safe_load(\"config.yml\"))\npipeline = AnonymizationPipeline(config=config)\nprint(pipeline.run(df))\n</code></pre></p> <p>Full documentation available at API reference - Pipeline.</p>"}]}